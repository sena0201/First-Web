type Status = 'all' | 'completed' | 'updating';
declare class ComicsApi {
    private domain;
    constructor();
    private createRequest;
    private getComicId;
    private getGenreId;
    private formatTotal;
    private trim;
    private getComics;
    getChapters(comicId: string): Promise<any>;
    getGenres(): Promise<any>;
    getRecommendComics(type?: 'hot' | 'boy' | 'girl'): Promise<any>;
    getRecentUpdateComics(page?: number): Promise<any>;
    getCompletedComics(page?: number): Promise<any>;
    getNewComics(status?: Status, page?: number): Promise<any>;
    getComicsByGenre(genreId: string, page?: number, status?: Status): Promise<any>;
    getTopDailyComics(status?: Status, page?: number): Promise<any>;
    getTopWeeklyComics(status?: Status, page?: number): Promise<any>;
    getTopMonthlyComics(status?: Status, page?: number): Promise<any>;
    getTopFollowComics(status?: Status, page?: number): Promise<any>;
    getTopCommentComics(status?: Status, page?: number): Promise<any>;
    getTopAllComics(status?: Status, page?: number): Promise<any>;
    getTopChapterComics(status?: Status, page?: number): Promise<any>;
    getTrendingComics(page?: number): Promise<any>;
    getBoyComics(page?: number): Promise<any>;
    getGirlComics(page?: number): Promise<any>;
    searchComics(query: string, page?: number): Promise<any>;
    getComicDetail(comicId: string): Promise<any>;
    getChapter(comicId: string, chapterId: number): Promise<any>;
    getComicsByAuthor(alias: string): Promise<any>;
    getComments(comicId: string, page?: number, chapterId?: number): Promise<any>;
    getSearchSuggest(query: string): Promise<any>;
}
declare const Comics: ComicsApi;
export { Comics };
